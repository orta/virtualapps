package window {  import flash.display.*;  import flash.xml.XMLDocument;  import flash.geom.Rectangle;  import flash.geom.Point;  import flash.events.*;  import flash.net.URLLoader;  import flash.net.URLRequest;  import flash.events.ErrorEvent;  import flash.events.MouseEvent;  import flash.display.Loader;  import flash.filters.DropShadowFilter;  import visor.Visor;  import visor.lt.uza.utils.*;  /**    *	SWF based window, 0,0 is the SWF!, not the title    *      *    *	@langversion ActionScript 3.0    *	@playerversion Flash 9.0    *    *	@author orta    *	@since  2008-06-14    */  public class SWFWindow extends Window{					    private var titleBar:Sprite;    private var titleBarStretchedBG:Sprite;    private var imageURL:URLRequest;    private var maskHeight:Number = 400;    private var maskWidth:Number = 330;    private var Movie:MovieClip;     private var bgColour:uint;		private var $:Global = Global.init();    public function SWFWindow(inOS:OS, swfURL:String ) {      mPath = swfURL;      mOS = inOS;      titleBar = new Sprite();      try{        var xmlString:URLRequest = new URLRequest("xml/" + mPath + ".xml");        var xmlLoader:URLLoader = new URLLoader(xmlString);      }      catch(error:IOErrorEvent){        $.trace("swf XML not found at path: " + mPath + " error =" +error.text);      }                        xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);      xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);      xmlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorHandler);      titleBar.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);      titleBar.addEventListener(MouseEvent.MOUSE_UP, onWindowMouseUp);    }    private function onIOError(event:Event): void {      $.trace("SWF Window : Error loading " + this.mPath + " \n Error = " + event.toString());    }    private function onSecurityErrorHandler(event:SecurityErrorEvent):void {      $.trace("SWF Window : Security Error loading " + this.mPath + " \n Error = " + event.toString());    }    private function xmlLoaded(event:Event): void {      $.trace("swf xml loaded");      try{        var xDoc:XMLDocument=new XMLDocument;        xDoc.ignoreWhite=true;        var mXML:XML=XML(event.target.data);        xDoc.parseXML(mXML.toXMLString());      }catch(err:Error){        $.trace("XML Loading error on " + this.mPath + ": " + err.toString());        return;      }      if(mXML.maskwidth.toString() != "") {        this.maskWidth = mXML.maskwidth;      }      if(mXML.maskheight.toString() != "") {        this.maskHeight = mXML.maskheight;      }      if(mXML.bgcolour.toString() != "") {        switch (mXML.bgcolour){          case "black":            bgColour = 0x000000;            break;          case "blue":            bgColour = 0x4c82d4;            break;          default:            bgColour = 0xffffff;          break;        }      }      appName = mXML.appname;      loadTitlebar();      var url:String = "swf/" + mXML.flashurl + ".swf" ;      var mLoader:Loader = new Loader();      if(bgColour != 0){        var rect:Shape = new Shape();        rect.graphics.beginFill(bgColour);        rect.graphics.drawRect(0, 0,maskWidth, maskHeight);        addChild(rect);      }      var mRequest:URLRequest = new URLRequest(url);      mLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteHandler);      mLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);      try{        trace(7)          mLoader.load(mRequest);        trace(8)        }        catch(error:IOErrorEvent){          $.trace(" Error loading swf" + url + " error =" +error.text);        }                      this.x = 100;        this.y = 200;      }      private function onCompleteHandler(loadEvent:Event):void      {        var dropShadow:DropShadowFilter = new DropShadowFilter();        dropShadow.color = 0x000000;        dropShadow.strength = 0.8;        dropShadow.blurX = 30;        dropShadow.blurY = 30;        dropShadow.angle = 90;        dropShadow.alpha = 0.5;        dropShadow.distance = 8;        filters = [dropShadow];        var rect:Shape = new Shape();        rect.graphics.beginFill(bgColour);        rect.graphics.drawRect(0, 0, maskWidth, maskHeight);        addChild(rect);        loadEvent.currentTarget.content.mask = rect;        addChild(loadEvent.currentTarget.content);        mOS.addChild(this);      }      private function onProgressHandler(mProgress:ProgressEvent):void      {        var percent:Number = mProgress.bytesLoaded/mProgress.bytesTotal;        trace(percent * 100 + "%");      }      private function onMouseDown(event:MouseEvent):void      {         startDrag();         if(mOS.menuBar != null){          mOS.setCurrentApplication(appName);        }      }      private function onWindowMouseUp(event:MouseEvent):void      {         stopDrag();       }      private function loadTitlebar() : void      {        if(mOS.titlecenter != null) {          var cLoader:Loader = new Loader();          imageURL = new URLRequest("img/" + mOS.titlecenter + ".png");          cLoader.load(imageURL);                 cLoader.x += 4;          titleBar.addChild(cLoader);          cLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCenterLoaded);        }      }      private function onCenterLoaded(loadEvent:Event) :void{        titleBarStretchedBG = new Sprite();        titleBarStretchedBG.addChild(loadEvent.currentTarget.content);         titleBarStretchedBG.width = maskWidth - 8;        titleBarStretchedBG.y = -22;        titleBarStretchedBG.x = 4;                if(mOS.titleleft != null) {          var lLoader:Loader = new Loader();          imageURL = new URLRequest("img/" + mOS.titleleft+ ".png");                  lLoader.load(imageURL);                 lLoader.y = -22;                 titleBar.addChild(lLoader);                 }        if(mOS.titleright != null) {          var rLoader:Loader = new Loader();          imageURL = new URLRequest("img/" + mOS.titleright+ ".png");                 rLoader.load(imageURL);          rLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onRightLoaded);        }        addChild(titleBar);           }      private function onRightLoaded(loadEvent:Event) :void{        var rightSprite:Sprite = new Sprite();        rightSprite.addChild( loadEvent.currentTarget.content);        rightSprite.y -= 22;        rightSprite.x = maskWidth -  rightSprite.width;        titleBar.addChild(rightSprite);      }    }  }