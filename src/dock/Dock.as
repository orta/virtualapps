package dock {  import flash.display.*;  import flash.events.*;  import flash.xml.XMLDocument;  import flash.net.URLLoader;  import flash.net.URLRequest;  import flash.events.ErrorEvent;  import flash.events.MouseEvent;  import flash.filters.DropShadowFilter;  import flash.text.TextField;  import flash.geom.ColorTransform;  import gs.TweenLite;	  import visor.lt.uza.utils.*;  public class Dock extends Sprite{    public var $:Global = Global.init();    public var dockItems:Array = new Array();    private var mOS:OS;    private var background:Sprite = new Sprite();    private var appNames:Array = new Array();    private var appWindows:Array = new Array();    private var showingLabel:Boolean = false;    private var itemLabel:ItemNameTag;    // _itemLabel is held by the OS, because it gives    // so so much trouble when held by the OS.        public function Dock(myOS:OS, _itemLabel:ItemNameTag){      mOS = myOS;      itemLabel = _itemLabel;      update();      mouseChildren = false;      addEventListener(MouseEvent.MOUSE_MOVE, onMouseOver);      addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);      addEventListener(MouseEvent.MOUSE_UP, onMouseUp);      addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);      mOS.stage.addEventListener(Event.RESIZE, resizeHandler);        addChild(background);           drawBG();        var xmlString:URLRequest = new URLRequest("xml/" + "dock" + ".xml");      try{        var xmlLoader:URLLoader = new URLLoader(xmlString);      }      catch(error:IOErrorEvent){        $.trace("can't find the dock settings... ");      }							      xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);    }        public function refresh():void {      resizeHandler();    }		private function xmlLoaded(event:Event): void {						var xDoc:XMLDocument=new XMLDocument;			xDoc.ignoreWhite=true;			var mXML:XML=XML(event.target.data);			xDoc.parseXML(mXML.toXMLString());            var appList:XMLList = mXML.app;			for each (var app:XML in appList) {				if(app.toString() != "") { 					appNames.push(app.attribute("name"));						appWindows.push(app);									}			}				    }        public function addDockItem(name:String) : void {      var item:DockItem = new DockItem();      item.x = 64 * (dockItems.length + 1);      item.itemName = name;      item.draw();      addChild(item);      dockItems.push(item);      resizeHandler();          }        public function addDefaults():void{      addDockItem("finder");      addDockItem("mail");      addDockItem("safari");      addDockItem("system_preferences");          }        public function update():void {            dockItems = new Array();      while(numChildren != 0){        removeChildAt(0);      }      addChild(background);            addDefaults();            for each(var app:String in mOS.listOfApps){        if(app != "null" && app != "finder"){          $.trace("Adding " + app + " to the dock");          addDockItem(app)        }      }          resizeHandler();    }		      private function drawBG():void {      background.graphics.clear();      background.graphics.beginFill(0x000000, 0.001);      background.graphics.drawRect(0, -20, width, height);      background.graphics.endFill();      background.graphics.beginFill(0x000000, 0.4);      background.graphics.drawRoundRect( -10, 0, width + 20, height, 20);      background.graphics.endFill();          }          private function onMouseDown(event:MouseEvent):void {			      var mouseX:Number = event.localX;      var temp:Number = mouseX;      for (var i:int = 0; true; i++){        temp -= (dockItems[i].scaleX * 128);        if(temp <= 0){          dockItems[i].transform.colorTransform = new ColorTransform(1, 1, 1, 1, -60, -60, -60, 0);          break;        }      }    }    private function onMouseOver(event:MouseEvent):void {			      if(event.buttonDown) return;      var centerItemIndex:int = 0;      var mouseX:Number = event.localX;      var temp:Number = mouseX;      var dockLength:Number = dockItems.length;       var i:int = 0;      for ( i = 0; true; i++){        temp -= (dockItems[i].scaleX * 128);        if(temp <= 0){            //found selected icons            itemLabel.itemName = dockItems[i].itemName;            itemLabel.x = dockItems[i].x + (64 * dockItems[i].scaleX) + x;            itemLabel.y = -1 * (64 * dockItems[i].scaleY) - 30 + y;            itemLabel.draw();            break;        }      }      var TOTAL_PIXELS_OF_CURVE:Number = 500;      var TOTAL_PIXELS_OF_CURVE_DIV_TWO:Number = TOTAL_PIXELS_OF_CURVE / 2;      var xPush:int = 0;      for (i = 0; i < dockLength; i++){        dockItems[i].transform.colorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);        var currentItem:DockItem = dockItems[i];        var distanceFromMouseX:Number = (currentItem.x + 32) - mouseX;        if( (distanceFromMouseX < (TOTAL_PIXELS_OF_CURVE_DIV_TWO ) ) ||            (distanceFromMouseX > (TOTAL_PIXELS_OF_CURVE_DIV_TWO * -1 ) ) ) {          distanceFromMouseX = ((distanceFromMouseX / TOTAL_PIXELS_OF_CURVE_DIV_TWO) * 90) + 90;          var radians:Number = distanceFromMouseX * Math.PI/180;          var newScale:Number = Math.sin(radians);          if(newScale > 1) newScale = 1;          if(newScale < 0.5) newScale = 0.5;          TweenLite.to(currentItem, 0.2, {y: 64 + (newScale * -128), x: xPush, scaleX:newScale, scaleY:newScale, onUpdate:resizeHandler});          xPush += (newScale * 128);        }else{          currentItem.x = xPush;          xPush += 64;        }              }      resizeHandler();    }    private function onMouseOut(event:MouseEvent):void	{      for(var i:int; i < dockItems.length; i++){ 		        TweenLite.to(dockItems[i], 0.2, {y:0, x: i*64, scaleX:0.5, scaleY:0.5, onUpdate:resizeHandler});        dockItems[i].transform.colorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);      }      itemLabel.y = stage.stageHeight + 70;      resizeHandler();    }    private function onMouseUp(event:MouseEvent):void	{      var i:int;      for( i = 0; i < dockItems.length; i++){ 	        dockItems[i].transform.colorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);                }      var mouseX:Number = event.localX;      var temp:Number = mouseX;      for ( i = 0; true; i++){        temp -= (dockItems[i].scaleX * 128);        if(temp <= 0){          for (var j:int = 0; j < appNames.length; j++){                        if(appNames[j] == dockItems[i].itemName){              mOS.addWindow(appWindows[j]);               return;            }          }                      break;        }      }    }        private function resizeHandler(event:Event = null):void{      drawBG();      x = mOS.stage.stageWidth /2 - width/2;    }  }}