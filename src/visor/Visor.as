/* AS3  Copyright 2008 orta.  */package visor {  import visor.lt.uza.utils.*;  import gs.TweenLite;  import flash.geom.Rectangle;  import flash.geom.Point;  import flash.display.Sprite;  import flash.display.Bitmap;  import flash.display.BitmapData;  import flash.filters.BlurFilter;  import flash.filters.DropShadowFilter;  import flash.display.Loader;  import flash.net.URLRequest;  import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;  import flash.events.MouseEvent;  import flash.events.Event;  /**    *	Extends uza's console to be more Quake-like.    *    *	@langversion ActionScript 3.0    *	@playerversion Flash 9.0    *    *	@author orta    *	@since  15.06.2008    */  public class Visor extends Console {    private var superfluousVisualEffects:Boolean = false;    public static var debugLevel:int = 1;    private var _applicationObject:Sprite;    private var blurBackground:Sprite;    private var _debugButton:Sprite;    private var _sheen:Sprite;    private var _isShowing:Boolean = false;    private var _debugButtonTextField:TextField;    public function Visor(applicationObject:Sprite = null){      super();      if(superfluousVisualEffects){        if(applicationObject != null){          _applicationObject = applicationObject;                    blurBackground = new Sprite();          addChildAt(blurBackground, 0);        }      }      addDebugButton();      stage.addEventListener(Event.RESIZE, resizeHandler);        _debugButton.addEventListener(MouseEvent.MOUSE_OVER, onDebugButtonMouseOver);      _debugButton.addEventListener(MouseEvent.MOUSE_DOWN, onDebugButtonMouseDown);      _debugButton.addEventListener(MouseEvent.MOUSE_OUT, onDebugButtonMouseOut);      _debugButton.addEventListener(MouseEvent.MOUSE_UP, onDebugButtonMouseUp);      _isShowing = false;      y = -1 * (visorHeight + 50);                  $.error = error;    }    public function error(...args):void {      if(!_isShowing){        toggleVisor();      }      trace(args);    }    public function toggleVisor():void {      hideBlur();      if(_isShowing){        _isShowing = false;	        //the 50 gives it some leighway        TweenLite.to(this, 0.5, {  y: (visorHeight + 50) * -1, alpha:0});	      }else{        TweenLite.to(this, 0.5, { y:0, alpha:1, onComplete:updateBlur});		        _isShowing = true;	      }    }        private function hideBlur() :int{      if(superfluousVisualEffects == false)return 0 ;      if(_applicationObject == null)return 0 ;      for(var i:int = blurBackground.numChildren; i > 0; i--){         blurBackground.removeChildAt(0);      }      return 1;    }    private function updateBlur():void{      if(hideBlur() == 0) return;      var visorRectangle:Rectangle = new Rectangle(x,y,width,height);      var applicationBackgroundBitmap:BitmapData = new BitmapData(_applicationObject.width, _applicationObject.height, true, 0xffffff);      //hide this and grab the pixels from the app object behind it      visible = false;      applicationBackgroundBitmap.draw(_applicationObject);      visible = true;      var myBitties:BitmapData = new BitmapData(width, height, true, 0xffffff);      var blur:BlurFilter  = new BlurFilter();      myBitties.applyFilter(applicationBackgroundBitmap, visorRectangle, new Point(0,0), blur);      var bg:Bitmap = new Bitmap(myBitties);      blurBackground.addChild(bg);      blurBackground.filters  = [blur];    }		    private function addDebugButton() : void {            _debugButtonTextField = new TextField();      _debugButtonTextField.selectable = false;      _debugButtonTextField.textColor = 0xeeeeee;       var textFormat:TextFormat = new TextFormat();      textFormat.size = 12;      textFormat.font = "Lucida Grande"      _debugButtonTextField.width = 200;      _debugButtonTextField.defaultTextFormat = textFormat;      _debugButtonTextField.text = "Debug Level : " + debugLevel;            _debugButton = new Sprite();      _debugButton.mouseChildren = false;      _debugButton.useHandCursor = true;      _debugButton.buttonMode = true;            with(_debugButton) {        graphics.beginFill(0x000000, 0.9);        graphics.drawRoundRect( 0, 0, 110, 20, 20, 20);        graphics.endFill();      }      _debugButtonTextField.x = 4;      _debugButtonTextField.y = 0;      _debugButtonTextField.height = 20;      _debugButton.y = 4;      _debugButton.addChild(_debugButtonTextField);      addChild(_debugButton);      resizeHandler();    }        private function drawBG(colour:uint):void{      with(_debugButton) {        graphics.clear();        graphics.beginFill(colour, 0.9);        graphics.drawRoundRect( 0, 0, 110, 20, 20, 20);        graphics.endFill();      }    }        private function onDebugButtonMouseOver(event:MouseEvent):void{      drawBG(0x222222);    }        private function onDebugButtonMouseDown(event:MouseEvent):void{      drawBG(0x444444);    }        private function onDebugButtonMouseUp(event:MouseEvent):void{      drawBG(0x000000);      debugLevel++;      if(debugLevel == 4){        debugLevel = 1;      }      _debugButtonTextField.text = "Debug Level : " + debugLevel;      trace("Debug Level changed to " + debugLevel);    }        private function onDebugButtonMouseOut(event:MouseEvent):void{      drawBG(0x000000);    }        private function resizeHandler(event:Event = null):void{      _debugButton.x = stage.stageWidth - 100;    }  }}